刚开始时，内核只是通过使用空闲的物理内存来满足应用程序的内存请求，
但是当物理内存耗尽时，它便会开始使用所谓的交换空间（swap space）。
在Linux系统中，交换空间是一个在安装系统时分配的独立的磁盘区域。
如果熟悉Windows操作系统的话，Linux交换空间的作用有点像隐藏的Windows交换文件。
但与Windows不同，Linux的交换空间中没有局部堆、全局堆或可丢弃内存段等需要在代码中
操心的内容——Linux内核会为你完成所有的管理工作。
内核会在物理内存和交换空间之间移动数据和程序代码，使得每次读写内存时，
数据看起来总像是已存在于物理内存中，而不管在你访问它们之前，它们究竟是在哪里。
用更专业的术语来说，Linux实现了一个“按需换页的虚拟内存系统”。
用户程序看到的所有内存全是虚拟的，也就是说，它并不真正存在于程序使用的物理地址上。
Linux将所有的内存都以页为单位进行划分，通常每一页的大小为4096字节。
每当程序试图访问内存时，就会发生虚拟内存到物理内存的转换，
转换的具体实现和耗费的时间取决于你所使用的特定硬件情况。
当所访问的内存在物理上并不存在时，就会产生一个页面错误并将控制权交给内核。
Linux内核会对访问的内存地址进行检查，如果这个地址对于程序来说是合法可用的，内核就会确定需要向程
序提供哪一个物理内存页面。然后，如果该页面之前从未被写入过，内核就直接分配它，
如果它已经被保存在硬盘的交换空间上，内核就读取包含数据的内存页面到物理内存（可能需要把一个已有页面从内存中移出到硬盘）。
接着，在完成虚拟内存地址到物理地址的映射之后，内核允许用户程序继续运行。
Linux应用程序并不需要操心这一过程，因为所有的具体实现都已隐藏在内核中了。
