using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace TCPClient
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        private string filepath = "E:\\My_workspace\\client.txt";
        private readonly int sendBufSize = 1024;
        private bool SendFileToServer(string filePath, Socket sock, ref string failInfo)
        {
            try
            {
                StreamReader fdRead = new StreamReader(filePath);
                string senddata = "";
                while (!fdRead.EndOfStream)
                {
                    string line = fdRead.ReadLine();//读取文件的一行
                    //判断是否会 超过 sendBufSize
                    if (senddata != "" && senddata.Length + line.Length >= sendBufSize)                    {
                        //发送数据
                        if (!SockSendData(senddata, sock))
                        {
                            fdRead.Close();
                            return false;
                        }
                        senddata = "";//清空发送缓冲容器
                        senddata = line;//保存还未处理的数据

                        //延时: 最好使用接收服务端的可发送命令
                        if (!WaitServerSendCMD(sock, ref failInfo))
                        {
                            fdRead.Close();
                            return false;
                        }
                    }
                    else
                    {
                        senddata += line;//累加需要发送的数据
                        senddata += '\n';
                    }
                }
                //判断是否还有数据未发送
                if (senddata != "")
                {
                    //发送数据
                    if (!SockSendData(senddata, sock))                    {
                        fdRead.Close();
                        return false;
                    }
                }
                fdRead.Close();
                return true;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
                return false;
            }
        }
        private bool SockSendData(string data, Socket sock)
        {
            try
            {
                byte[] byt = Encoding.Default.GetBytes(data);
                sock.SendBufferSize = byt.Length;
                if (!sock.BeginSend(byt, 0, byt.Length, 0, null, null).AsyncWaitHandle.WaitOne(380))
                {
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
                return false;
            }
        }
        private bool WaitServerSendCMD(Socket sock, ref string recvCMD)        {
            try
            {
                recvCMD = "";
                byte[] byt = new byte[10];
                if (!sock.BeginReceive(byt, 0, byt.Length, 0, null, null).AsyncWaitHandle.WaitOne(2000))
                {
                    recvCMD = "等待命令超时";
                    return false;
                }
                else
                {
                    string str = Encoding.Default.GetString(byt);
                    if (str.Contains("continue"))
                    {
                        return true;
                    }
                    else
                    {
                        recvCMD = str;
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
                return false;
            }
        }
        private void Form1_Load(object sender, EventArgs e)
        {
        }

        private void skinButton1_Click(object sender, EventArgs e)
        {
            try
            {
                //获取端口
                int port = Convert.ToInt32(portTextBox2.Text);
                TcpClient client = new TcpClient();
                Socket sock = new Socket(SocketType.Stream, ProtocolType.Tcp);

                //103.45.186.229
                if (client.ConnectAsync(ipTextBox1.Text, port).Wait(3000))
                {
                    //连接成功
                    ConnectStatusLabel1.ForeColor = Color.Green;
                    sock = client.Client;

                    string recvServerCMD = "";
                    string str_send = "Filename:" + Path.GetFileName(filepath);
                    do
                    {
                        //发送包头
                        if (!SockSendData(str_send, sock))
                        {
                            ConnectStatusLabel1.Text = "发送文件名失败";
                            break;
                        }
                        if (!WaitServerSendCMD(sock, ref recvServerCMD))                        {
                            ConnectStatusLabel1.Text = recvServerCMD;
                            break;
                        }
                        //发送文件
                        if (!SendFileToServer(filepath, sock, ref recvServerCMD))
                        {
                            ConnectStatusLabel1.Text = recvServerCMD;
                            break;
                        }

                        if (!WaitServerSendCMD(sock, ref recvServerCMD))
                        {
                            ConnectStatusLabel1.Text = recvServerCMD;
                            break;
                        }
                        //发送包尾
                        if (!SockSendData("", sock))
                        {
                            ConnectStatusLabel1.Text = "发送失败";
                            break;
                        }
                        //ConnectStatusLabel1.Text = "传送成功";                    } while (false);
                    client.Close();
                    sock.Close();
                    if (ConnectStatusLabel1.Text != "传送成功")
                    {
                        ConnectStatusLabel1.ForeColor = Color.Red;
                    }
                }
                else
                {
                    ConnectStatusLabel1.ForeColor = Color.Red;
                    ConnectStatusLabel1.Text = "连接失败";
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }
    }
}
